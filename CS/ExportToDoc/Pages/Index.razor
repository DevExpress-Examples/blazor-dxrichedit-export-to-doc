@page "/"
@inject IJSRuntime JS

<DxRichEdit @ref="richEdit" @bind-DocumentContent="@documentContent" CustomizeRibbon="OnCustomizeRibbon"/>

@code {
    DxRichEdit richEdit;
    byte[] documentContent;

    protected override async Task OnInitializedAsync() {
        documentContent = await File.ReadAllBytesAsync("Data\\Documents\\File.docx");
        await base.OnInitializedAsync(); 
    }

    void OnCustomizeRibbon(IRibbon ribbon) {
        IRibbonTab fileTab = ribbon.Tabs[RichEditRibbonTabNames.File];
        IBarGroup fontGroup = fileTab.Groups[RichEditRibbonGroupNames.FileCommon];
        IBarItem downloadMenu = fontGroup.Items[RichEditBarItemNames.DownloadMenu];
        if (downloadMenu.Type == BarItemTypes.DropDown) {
            IBarDropDown downloadMenuDropDown = (IBarDropDown)downloadMenu;
            downloadMenuDropDown.Items.AddCustomButton("DOC (*.doc)", ExportToDoc);
        }
    }

    async Task ExportToDoc() {
        await richEdit.SaveDocumentAsync();
        using DevExpress.XtraRichEdit.RichEditDocumentServer server = new DevExpress.XtraRichEdit.RichEditDocumentServer();
        server.LoadDocument(documentContent);
        byte[] docContent = server.SaveDocument(DevExpress.XtraRichEdit.DocumentFormat.Doc);
        var fileStream = new MemoryStream(docContent);
        using var streamRef = new DotNetStreamReference(stream: fileStream);
        await JS.InvokeVoidAsync("downloadFileFromStream", "File.doc", streamRef);
    }
}
